import discord
from discord.ext import commands
from discord.ui import View, Select, Button
import os

class TicketSystem(commands.Cog):
    """Syst√®me de tickets avec menu d√©roulant et gestion avanc√©e."""

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.ticket_categories = {
            "partenariat": {"description": "Faire une demande de partenariat", "category_id": 1371176734434529361, "role_ping": 1371177529297342564},
            "se v√©rifier": {"description": "Se faire v√©rifier", "category_id": 1371177186937278554, "role_ping": 1371177629570568264},
            "recrutement": {"description": "Se faire recruter", "category_id": 1371178636085956658, "role_ping": 1371177973448970270},
            "fake": {"description": "Signaler un membre fake", "category_id": 1371178690154860604, "role_ping": 1371177906461737143},
            "report": {"description": "Reporter un membre", "category_id": 1371178818596896911, "role_ping": 1371177679315009668},
            "autre": {"description": "Pour une autre raison", "category_id": 1371185321043165274, "role_ping": 1371177752975249561},
        }
        self.ticket_log_channel_id = 1355619861153317004  # ID du salon log des tickets
        self.ticket_counter = 0  # Compteur pour les num√©ros de tickets

    @commands.Cog.listener()
    async def on_ready(self):
        print("üé´ Syst√®me de tickets pr√™t !")

    @commands.command(name="setup_ticket", description="Configurer le syst√®me de tickets.")
    @commands.has_permissions(administrator=True)
    async def setup_ticket(self, ctx: commands.Context):
        """Commande pour configurer le syst√®me de tickets."""
        embed = discord.Embed(
            title="üé´ Syst√®me de Tickets",
            description=(
                "Pour contacter le staff, s√©lectionnez une raison en utilisant le menu d√©roulant ci-dessous pour ouvrir un ticket.\n"
                "> Il est inutile de ping le staff dans votre ticket, il sera pris en charge d√®s que possible par un membre du staff.\n\n"
                "Toute forme d'abus (ouverture inutile, troll, etc.) sera s√©v√®rement sanctionn√©e."
            ),
            color=discord.Color.blue()
        )

        # Menu d√©roulant pour s√©lectionner une raison
        select = Select(placeholder="Choisissez une raison", options=[
            discord.SelectOption(label=reason.capitalize(), description=data["description"], value=reason)
            for reason, data in self.ticket_categories.items()
        ])
        select.callback = self.create_ticket

        view = View(timeout=None)
        view.add_item(select)

        await ctx.send(embed=embed, view=view)

    async def create_ticket(self, interaction: discord.Interaction):
        """Cr√©er un ticket en fonction de la raison s√©lectionn√©e."""
        reason = interaction.data["values"][0]
        category_data = self.ticket_categories.get(reason)

        if not category_data:
            await interaction.response.send_message("‚ùå Une erreur est survenue. Veuillez r√©essayer.", ephemeral=True)
            return

        guild = interaction.guild
        category = discord.utils.get(guild.categories, id=category_data["category_id"])

        # V√©rifier si la cat√©gorie existe
        if not category:
            await interaction.response.send_message("‚ùå La cat√©gorie associ√©e √† cette raison n'existe pas.", ephemeral=True)
            return

        # V√©rifier si l'utilisateur a d√©j√† un ticket ouvert
        existing_channel = discord.utils.get(category.channels, name=f"t-{interaction.user.id}")
        if existing_channel:
            await interaction.response.send_message("‚ùå Vous avez d√©j√† un ticket ouvert.", ephemeral=True)
            return

        # Cr√©er un salon pour le ticket
        self.ticket_counter += 1
        ticket_name = f"t-{self.ticket_counter} | {interaction.user.name}"
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        ticket_channel = await category.create_text_channel(name=ticket_name, overwrites=overwrites)

        # Envoyer un message dans le salon du ticket
        embed = discord.Embed(
            title=f"üé´ Ticket - {reason.capitalize()}",
            description="Expliquez votre probl√®me ici. Un membre du staff vous r√©pondra bient√¥t.",
            color=discord.Color.green()
        )
        role_ping = guild.get_role(category_data["role_ping"])
        close_button = Button(label="Fermer", style=discord.ButtonStyle.red)
        close_button.callback = lambda i: self.close_ticket(i, ticket_channel, interaction.user)

        view = View(timeout=None)
        view.add_item(close_button)

        await ticket_channel.send(
            content=f"{interaction.user.mention}, bienvenue dans votre ticket ! {role_ping.mention if role_ping else ''}",
            embed=embed,
            view=view
        )
        await interaction.response.send_message(f"‚úÖ Ticket cr√©√© : {ticket_channel.mention}", ephemeral=True)

    async def close_ticket(self, interaction: discord.Interaction, channel: discord.TextChannel, ticket_owner: discord.Member):
        """Fermer un ticket."""
        # Modifier les permissions pour retirer l'acc√®s au membre
        await channel.set_permissions(ticket_owner, read_messages=False, send_messages=False)

        # Renommer le salon pour indiquer qu'il est ferm√©
        await channel.edit(name=f"{channel.name} - ferm√©")

        # Envoyer un message indiquant que le ticket est ferm√©
        embed = discord.Embed(
            title="Ticket ferm√©",
            description=f"Ticket ferm√© par {interaction.user.mention}.",
            color=discord.Color.red()
        )
        reopen_button = Button(label="R√©ouvrir", style=discord.ButtonStyle.green)
        delete_button = Button(label="Supprimer", style=discord.ButtonStyle.danger)

        reopen_button.callback = lambda i: self.reopen_ticket(i, channel, ticket_owner)
        delete_button.callback = lambda i: self.delete_ticket(i, channel)

        view = View(timeout=None)
        view.add_item(reopen_button)
        view.add_item(delete_button)

        await channel.send(embed=embed, view=view)
        await interaction.response.send_message("‚úÖ Ticket ferm√©.", ephemeral=True)

    async def reopen_ticket(self, interaction: discord.Interaction, channel: discord.TextChannel, ticket_owner: discord.Member):
        """R√©ouvrir un ticket."""
        # Redonner l'acc√®s au membre
        await channel.set_permissions(ticket_owner, read_messages=True, send_messages=True)

        # Renommer le salon pour indiquer qu'il est r√©ouvert
        await channel.edit(name=channel.name.replace(" - ferm√©", ""))

        # Envoyer un message indiquant que le ticket est r√©ouvert
        embed = discord.Embed(
            title="Ticket r√©ouvert",
            description=f"Ticket r√©ouvert par {interaction.user.mention}.",
            color=discord.Color.green()
        )
        await channel.send(embed=embed)
        await interaction.response.send_message("‚úÖ Ticket r√©ouvert.", ephemeral=True)

    async def delete_ticket(self, interaction: discord.Interaction, channel: discord.TextChannel):
        """Supprimer un ticket et envoyer les logs."""
        # R√©cup√©rer l'historique des messages
        messages = await channel.history(limit=None, oldest_first=True).flatten()
        log_content = "\n".join([f"[{msg.created_at}] {msg.author}: {msg.content}" for msg in messages])

        # Envoyer les logs dans le salon d√©di√©
        log_channel = self.bot.get_channel(self.ticket_log_channel_id)
        if log_channel and log_content.strip():
            await log_channel.send(
                content=f"Logs du ticket {channel.name} :",
                file=discord.File(fp=log_content, filename=f"{channel.name}.txt")
            )

        # Supprimer le salon
        await channel.delete()
        await interaction.response.send_message("Ticket supprim√©.", ephemeral=True)


async def setup(bot: commands.Bot):
    """Ajoute le cog au bot."""
    await bot.add_cog(TicketSystem(bot))