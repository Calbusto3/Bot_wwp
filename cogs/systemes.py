import discord
import discord
from discord.ext import commands
import time
from datetime import datetime


class WelcomeMessage(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.active_servers = {}  # Stocke les serveurs o√π le syst√®me est activ√©

        self.welcome_message_2 = """Nous vous mettons un serveur √† disposition dans lequel nous **donnerons gratuitement** aux membres des jeux (**sens√© √™tre payant**) r√©guli√®rement.

- Pour y entrer, faire une **candidature** dans le serveur, soyez convaincant : 
> https://discord.gg/mwsYspWkzF 

Des questions ? -> ‚Å†<#1141835303573799065>"""

    @commands.Cog.listener()
    async def on_member_join(self, member):
        """Envoie le message de bienvenue uniquement si activ√© pour le serveur."""
        guild_id = member.guild.id

        if self.active_servers.get(guild_id, False):  # V√©rifie si activ√©
            try:
                await member.send(self.welcome_message_2)  # Envoie le message en DM
            except discord.Forbidden:
                print(f"Impossible d'envoyer un message √† {member.name} en DM.")

    @commands.command(name="a_acc")
    @commands.has_permissions(administrator=True)
    async def activate_welcome(self, ctx):
        """Active l'envoi du message en DM dans ce serveur."""
        self.active_servers[ctx.guild.id] = True
        await ctx.send("‚úÖ Le syst√®me d'envoi du message de bienvenue en DM est **activ√©**.")

    @commands.command(name="d_acc")
    @commands.has_permissions(administrator=True)
    async def deactivate_welcome(self, ctx):
        """D√©sactive l'envoi du message en DM dans ce serveur."""
        self.active_servers[ctx.guild.id] = False
        await ctx.send("‚ùå Le syst√®me d'envoi du message de bienvenue en DM est **d√©sactiv√©**.")


    @commands.command()
    @commands.has_role(1145807576353742908)  # V√©rifie si l'utilisateur a le r√¥le Mod√©rateur
    async def faituntimelessde(self, ctx, duration: str):
    # Code de la commande ici...

        """G√©n√®re un timestamp Discord et l'affiche en embed + DM au membre."""
        unit_mapping = {"s": 1, "m": 60, "h": 3600, "j": 86400}

        # V√©rification de l'entr√©e utilisateur
        try:
            value, unit = int(duration[:-1]), duration[-1].lower()
            if unit not in unit_mapping:
                raise ValueError
        except ValueError:
            await ctx.send("‚ö†Ô∏è **Format invalide !** Utilise : `+faituntimelessde [nombre][s/m/h/j]`")
            return

        # Calcul du timestamp
        current_time = int(time.time())
        target_time = current_time + (value * unit_mapping[unit])

        # Formatage du timestamp pour Discord
        discord_timestamp = f"<t:{target_time}:R>"

        # Envoi du message dans le salon
        embed = discord.Embed(
            title="A ton service",
            description=f"{discord_timestamp} !",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed)

        # Envoi du timestamp en MP
        try:
            embed_dm = discord.Embed(
                title="Tien au cas o√π",
                description=f"Voici le code du timestamp que tu peux copier si jamais tu veux l'utilisez toi m√™me, chiao :\n```\n<t:{target_time}:R>\n```",
                color=discord.Color.green()
            )
            await ctx.author.send(embed=embed_dm)
        except discord.Forbidden:
            await ctx.send("‚ùå Impossible d'envoyer le timestamp en MP.")

    @commands.command(name="hide")
    @commands.has_role(1145807576353742908)  # ID du r√¥le Mod√©rateurs
    async def hide(self, ctx, channel: discord.TextChannel = None):
        """Cache un salon pour tout le monde sauf les mod√©rateurs."""
        if channel is None:
            channel = ctx.channel  # Si aucun salon n'est sp√©cifi√©, prend le salon actuel

        everyone_role = ctx.guild.default_role  # R√©cup√©ration du r√¥le @everyone
        mod_role = ctx.guild.get_role(1145807576353742908)  # R√¥le mod√©rateur
        
        # On enl√®ve la vue √† @everyone
        await channel.set_permissions(everyone_role, view_channel=False)

        # On enl√®ve la vue √† tous les autres r√¥les sauf les mod√©rateurs ou plus
        for role in ctx.guild.roles:
            if role.position < mod_role.position and role != everyone_role:  # On exclut les modos et plus
                await channel.set_permissions(role, view_channel=False)

        await ctx.send(f"salon {channel.mention} cach√© pour le moment.")

    @hide.error
    async def hide_error(self, ctx, error):
        """Gestion des erreurs"""
        if isinstance(error, commands.MissingRole):
            await ctx.send("‚ùå **Tu n'as pas la permission d'utiliser cette commande !**")
        elif isinstance(error, commands.ChannelNotFound):
            await ctx.send("‚ùå **Salon introuvable !**")
        else:
            await ctx.send("‚ùå **Une erreur s'est produite !**")


# INFOS_AVANCEES ---------------------------------------------------------------------

    async def check_permissions(self, ctx):
        role_required = 1145807530547757107  # ID du r√¥le requis
        if role_required not in [role.id for role in ctx.author.roles]:
            await ctx.send("‚õî Vous n'avez pas la permission d'utiliser cette commande.")
            return False
        return True

    @commands.command(name="infos_avanc√©")
    async def infos_avance(self, ctx, arg1: discord.Role | discord.Member | discord.TextChannel | discord.VoiceChannel | discord.Emoji | discord.CategoryChannel, arg2: discord.Member = None):
        if not await self.check_permissions(ctx):
            return
        
        embed = discord.Embed(color=discord.Color.blue(), timestamp=datetime.utcnow())
        
        if isinstance(arg1, discord.Role):
            embed.title = f"üìå Infos sur le r√¥le {arg1.name}"
            embed.add_field(name="üÜî ID", value=arg1.id, inline=False)
            embed.add_field(name="üìÜ Cr√©√© le", value=arg1.created_at.strftime("%d/%m/%Y %H:%M"), inline=False)
            embed.add_field(name="üé® Couleur", value=str(arg1.color), inline=False)
            embed.add_field(name="üë• Nombre de membres", value=len(arg1.members), inline=False)
            embed.set_footer(text="Infos avanc√©es - R√¥le")
        
        elif isinstance(arg1, discord.TextChannel) or isinstance(arg1, discord.VoiceChannel):
            embed.title = f"üèóÔ∏è Infos sur le salon {arg1.name}"
            embed.add_field(name="üÜî ID", value=arg1.id, inline=False)
            embed.add_field(name="üìÜ Cr√©√© le", value=arg1.created_at.strftime("%d/%m/%Y %H:%M"), inline=False)
            if isinstance(arg1, discord.VoiceChannel):
                embed.add_field(name="üîä Type", value="Salon vocal", inline=False)
                active_members = arg1.members
                embed.add_field(name="üë• Membres actuellement connect√©s", value=len(active_members), inline=False)
            else:
                embed.add_field(name="üí¨ Type", value="Salon textuel", inline=False)
            embed.set_footer(text="Infos avanc√©es - Salon")
        
        elif isinstance(arg1, discord.Member) and isinstance(arg2, discord.Role):
            if arg2 in arg1.roles:
                embed.title = f"üë§ Infos sur {arg1.name} et le r√¥le {arg2.name}"
                embed.add_field(name="üìÜ Date d'attribution", value="Impossible √† r√©cup√©rer via l'API", inline=False)
                embed.add_field(name="üÜî ID du membre", value=arg1.id, inline=False)
            else:
                embed.title = "‚ùå Aucune relation trouv√©e"
                embed.description = f"{arg1.name} ne poss√®de pas le r√¥le {arg2.name}."
            embed.set_footer(text="Infos avanc√©es - Membre & R√¥le")
        
        elif isinstance(arg1, discord.Emoji):
            embed.title = f"üòÄ Infos sur l'emoji {arg1.name}"
            embed.add_field(name="üÜî ID", value=arg1.id, inline=False)
            embed.add_field(name="üìÜ Ajout√© le", value=arg1.created_at.strftime("%d/%m/%Y %H:%M"), inline=False)
            embed.set_footer(text="Infos avanc√©es - Emoji")
        
        elif isinstance(arg1, discord.CategoryChannel):
            embed.title = f"üìÇ Infos sur la cat√©gorie {arg1.name}"
            embed.add_field(name="üÜî ID", value=arg1.id, inline=False)
            embed.add_field(name="üìÜ Cr√©√©e le", value=arg1.created_at.strftime("%d/%m/%Y %H:%M"), inline=False)
            embed.add_field(name="üìú Nombre de salons", value=len(arg1.channels), inline=False)
            embed.set_footer(text="Infos avanc√©es - Cat√©gorie")
        
        else:
            embed.title = "‚ùå Erreur"
            embed.description = "Mauvais param√®tres ou donn√©es introuvables."
            embed.set_footer(text="Infos avanc√©es - Erreur")
        
        await ctx.send(embed=embed)    
async def setup(bot):
    await bot.add_cog(WelcomeMessage(bot))
